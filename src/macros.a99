**
* Macros
*
       .defm jsr
       li   r11,!
       movb r11,*rsp
       dec  rsp
       swpb r11
       movb r11,*rsp
       dec  rsp
       b    #1
!:
       nop
       .endm

       .defm rts
       inc  rsp
       movb *rsp+,r11
       swpb r11
       movb *rsp,r11
       b    *r11
       .endm

       .defm pha
       movb ra,*rsp
       dec  rsp
       .endm

       .defm pla
       inc  rsp
       movb *rsp,ra
       .endm

       .defm php
       stst rtmp
       movb rtmp,*rsp
       dec  rsp
       .endm

       .defm plp
       INC  rsp
       movb *rsp,rtmp
       ; todo: restore status
       .endm

       .defm adc
       jnc  !
       ab   rone,ra
!:
       ab   #1,ra
       .endm

       .defm adi
       jnc  !
       ab   rone,ra
!:
       ai   ra,#1
       .endm

       .defm adc_ind_y_idx
       clr  ra
       jnc  !
       ab   rone,ra
!:
       movb #1,@rtmplb
       movb #1+1,rtmp
       a    ry,rtmp
       ab   *rtmp,ra
       .endm

       .defm sbc
       joc  !
       sb   rone,ra
!:
       sb   #1,ra
       .endm

       .defm sbi
       joc  !
       sb   rone,ra
!:
       ai   ra,-#1
       .endm

       .defm and
       movb #1,rtmp
       inv  rtmp
       szcb rtmp,ra
       .endm

       .defm cmp_ind_y_idx
       movb #1,@rtmplb
       movb #1+1,rtmp
       a    ry,rtmp
       movb *rtmp,rtmp
       cb   ra,rtmp
       .endm

       .defm and_ind_y_idx
       movb #1,@rtmplb
       movb #1+1,rtmp
       a    ry,rtmp
       movb *rtmp,rtmp
       inv  rtmp
       szcb rtmp,#2
       .endm

       .defm bit
       movb #1,rtmp
       inv  rtmp
       movb rone,rtmp2
       szcb rtmp2,rtmp
       ; todo: bit 6 and 7
       .endm

       .defm ld_x_idx_ind
       movb #1(rx),@rtmplb
       movb #1+1(rx),rtmp
       movb *rtmp,#2
       .endm

       .defm st_x_idx_ind
       movb #1(rx),@rtmplb
       movb #1+1(rx),rtmp
       movb #2,*rtmp
       .endm

       .defm ld_ind_y_idx
       movb #1,@rtmplb
       movb #1+1,rtmp
       a    ry,rtmp
       movb *rtmp,#2
       .endm

       .defm st_ind_y_idx
       movb #1,@rtmplb
       movb #1+1,rtmp
       a    ry,rtmp
       movb #2,*rtmp
        .endm

       .defm eoi
       li   rtmp,#1
       xor  rtmp,ra
       .endm

       .defm eor
       movb #1,rtmp
       xor  rtmp,ra
       .endm

       .defm lsr
       movb #1,rtmp
       srl  rtmp,1
       movb rtmp,#1
       .endm

       .defm rola
       jnc  !
       ori  ra,>0080
!:
       jmp  !
       andi ra,>ff7f
!:
       sla  ra,1
       .endm

       .defm rol
       movb #1,rtmp
       jnc  !
       ori  rtmp,>0080
!:
       jmp  !
       andi rtmp,>ff7f
!:
       sla  rtmp,1
       mov  rtmp,#1
       .endm

       .defm rora
       jnc  !
       ori  ra,>0001
!:
       jmp  !
       andi ra,>fffe
!:
       src  ra,1
       andi ra,>0080
       mov  ra,rtmp
       sla  rtmp,9
       .endm

       .defm ror
       movb #1,rtmp
       jnc  !
       ori  rtmp,>0001
!:
       jmp  !
       andi rtmp,>fffe
!:
       src  rtmp,1
       movb rtmp,#1
       andi rtmp,>0080
       sla  rtmp,9
       .endm

       .defm asla
       andi ra,>ff00
       sla  ra,1
       .endm

       .defm asl
       movb #1,rtmp
       andi rtmp,>ff00
       sla  rtmp,1
       movb rtmp,#1
       .endm

       .defm jmpi
       movb #1(rx),@rtmplb
       movb #1+1(rx),rtmp
       b    *rtmp
       .endm

       .defm bvs
       joc  !
       jmp  #1
!:
       nop
       .endm

       .defm sec
       sla  rmone,1
       .endm

       .defm clc
       sla  rzero,1
       .endm

       .defm char
       .ifeq #1, '`'
       byte 39 ^ RE
       .else
       byte #1 ^ RE
       .endif
       .endm

       .defm twok
       .endm

       .defm rtok
       .endm

       .defm cont
       .endm

       .defm proc
       mov  r11,*rsp+
       .endm

       .defm endproc
       dect rsp
       mov  *rsp,r11
       b    *r11
       .endm

