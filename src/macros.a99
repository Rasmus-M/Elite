**
* Macros
*
       .defm jsr
       li   r11,!
       movb r11,*sp
       dec  sp
       swpb r11
       movb r11,*sp
       dec  sp
       b    #1
!:
       equ  $
       .endm

       .defm rts
       inc  sp
       movb *sp+,r11
       swpb r11
       movb *sp,r11
       b    *r11
       .endm

       .defm pha
       movb ra,*sp
       dec  sp
       .endm

       .defm pla
       inc  sp
       movb *sp,ra
       .endm

       .defm php
       stst tmp
       movb tmp,*sp
       dec  sp
       .endm

       .defm plp
       INC  sp
       movb *sp,tmp
       ; todo: restore status
       .endm

       .defm adc
       jnc  !
       ab   one,ra
!:
       ab   #1,ra
       .endm

       .defm adi
       jnc  !
       ab   one,ra
!:
       ai   ra,#1
       .endm

       .defm sbc
       joc  !
       sb   one,ra
!:
       sb   #1,ra
       .endm

       .defm sbi
       joc  !
       sb   one,ra
!:
       ai   ra,-#1
       .endm

       .defm and
       movb #1,tmp
       inv  tmp
       szcb tmp,ra
       .endm

       .defm cmp_ind_y_idx
       movb @#1,@tmplb
       movb @#1+1,tmp
       a    ry,tmp
       movb *tmp,tmp
       cb   ra,tmp
       .endm

       .defm and_ind_y_idx
       movb @#1,@tmplb
       movb @#1+1,tmp
       a    ry,tmp
       movb *tmp,tmp
       inv  tmp
       szcb tmp,#2
       .endm

       .defm bit
       movb #1,tmp
       inv  tmp
       movb one,tmp2
       szcb tmp2,tmp
       ; todo: bit 6 and 7
       .endm

       .defm ld_x_idx_ind
       movb @#1(rx),@tmplb
       movb @#1+1(rx),tmp
       movb *tmp,#2
       .endm

       .defm st_x_idx_ind
       movb @#1(rx),@tmplb
       movb @#1+1(rx),tmp
       movb #2,*tmp
       .endm

       .defm ld_ind_y_idx
       movb #1,@tmplb
       movb #1+1,tmp
       a    ry,tmp
       movb *tmp,#2
       .endm

       .defm st_ind_y_idx
       movb #1,@tmplb
       movb #1+1,tmp
       a    ry,tmp
       movb #2,*tmp
        .endm

       .defm eoi
       li   tmp,#1
       xor  tmp,ra
       .endm

       .defm eor
       movb #1,tmp
       xor  tmp,ra
       .endm

       .defm lsr
       movb #1,tmp
       srl  tmp,1
       movb tmp,#1
       .endm

       .defm rola
       jnc  !
       ori  ra,>0080
!:
       jmp  !
       andi ra,>ff7f
!:
       sla  ra,1
       .endm

       .defm rol
       movb #1,tmp
       jnc  !
       ori  tmp,>0080
!:
       jmp  !
       andi tmp,>ff7f
!:
       sla  tmp,1
       mov  tmp,#1
       .endm

       .defm rora
       jnc  !
       ori  ra,>0001
!:
       jmp  !
       andi ra,>fffe
!:
       src  ra,1
       andi ra,>0080
       mov  ra,tmp
       sla  tmp,9
       .endm

       .defm ror
       movb #1,tmp
       jnc  !
       ori  tmp,>0001
!:
       jmp  !
       andi tmp,>fffe
!:
       src  tmp,1
       movb tmp,#1
       andi tmp,>0080
       sla  tmp,9
       .endm

       .defm asla
       andi ra,>ff00
       sla  ra,1
       .endm

       .defm asl
       movb #1,tmp
       andi tmp,>ff00
       sla  tmp,1
       movb tmp,#1
       .endm

       .defm bvs
       joc  !
       jmp  #1
!:
       equ  $
       .endm

       .defm sec
       sla  mone,1
       .endm

       .defm clc
       sla  zero,1
       .endm

       .defm char
       .ifeq #1, '`'
       byte 39 ^ RE
       .else
       byte #1 ^ RE
       .endif
       .endm

       .defm twok
       .endm

       .defm rtok
       .endm

       .defm cont
       .endm

       .defm proc
       mov  r11,*sp+
       .endm

       .defm endproc
       dect sp
       mov  *sp,r11
       b    *r11
       .endm

